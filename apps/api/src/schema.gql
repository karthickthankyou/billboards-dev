# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Advertiser {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Agent {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type BillboardStatus {
  status: BillboardStatusType!
  createdAt: DateTime!
  updatedAt: DateTime!
  notes: String!
  billboardId: Int!
  agentId: String!
}

enum BillboardStatusType {
  NEW
  VERIFIED
  APPROVED
  ON_HOLD
  REJECTED
  INSTALLATION_INPROGRESS
  LIVE
}

type Billboard {
  lat: Float!
  lng: Float!
  type: BillboardType!
  ownerId: String!
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  height: Int!
  width: Int!
  pricePerDay: Int!
  impressionsPerDay: Int!
  minBookingDays: Int!
  address: String!
  images: [String!]!
  angle: Int!
  elevation: Int!
}

enum BillboardType {
  CLASSIC
  VINYL
  LED
  NEON
  THREE_DIMENSIONAL
}

type Booking {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  pricePerDay: Int!
  campaignId: Int!
  billboardId: Int!
}

type CampaignStatus {
  status: CampaignStatusType!
  createdAt: DateTime!
  updatedAt: DateTime!
  campaignId: Int!
  agentId: String!
}

enum CampaignStatusType {
  NEW
  VERIFIED
  APPROVED
  ON_HOLD
  REJECTED
  INSTALLATION_INPROGRESS
  LIVE
}

type Campaign {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  advertiserId: String!
}

type Favorite {
  createdAt: DateTime!
  updatedAt: DateTime!
  advertiserId: String!
  billboardId: Int!
}

type Owner {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type Query {
  owners(where: OwnerWhereInput, orderBy: [OwnerOrderByWithRelationInput!], cursor: WhereUniqueInputUid, take: Int, skip: Int, distinct: [OwnerScalarFieldEnum!]): [Owner!]!
  owner(where: OwnerWhereUniqueInput): Owner!
  advertisers(where: AdvertiserWhereInput, orderBy: [AdvertiserOrderByWithRelationInput!], cursor: WhereUniqueInputUid, take: Int, skip: Int, distinct: [AdvertiserScalarFieldEnum!]): [Advertiser!]!
  advertiser(where: AdvertiserWhereUniqueInput): Advertiser!
  agents(where: AgentWhereInput, orderBy: [AgentOrderByWithRelationInput!], cursor: WhereUniqueInputUid, take: Int, skip: Int, distinct: [AgentScalarFieldEnum!]): [Agent!]!
  agent(where: AgentWhereUniqueInput): Agent!
  billboards(where: BillboardWhereInput, orderBy: [BillboardOrderByWithRelationInput!], cursor: WhereUniqueInputNumber, take: Int, skip: Int, distinct: [BillboardScalarFieldEnum!]): [Billboard!]!
  billboard(where: BillboardWhereUniqueInput): Billboard!
  billboardStatuses(where: BillboardStatusWhereInput, orderBy: [BillboardStatusOrderByWithRelationInput!], cursor: WhereUniqueInputBillboardId, take: Int, skip: Int, distinct: [BillboardStatusScalarFieldEnum!]): [BillboardStatus!]!
  billboardStatus(where: BillboardStatusWhereUniqueInput): BillboardStatus!
  favorites(where: FavoriteWhereInput, orderBy: [FavoriteOrderByWithRelationInput!], cursor: WhereUniqueInputFavorite, take: Int, skip: Int, distinct: [FavoriteScalarFieldEnum!]): [Favorite!]!
  favorite(where: FavoriteWhereUniqueInput): Favorite!
  campaigns(where: CampaignWhereInput, orderBy: [CampaignOrderByWithRelationInput!], cursor: WhereUniqueInputNumber, take: Int, skip: Int, distinct: [CampaignScalarFieldEnum!]): [Campaign!]!
  campaign(where: CampaignWhereUniqueInput): Campaign!
  bookings(where: BookingWhereInput, orderBy: [BookingOrderByWithRelationInput!], cursor: WhereUniqueInputNumber, take: Int, skip: Int, distinct: [BookingScalarFieldEnum!]): [Booking!]!
  booking(where: BookingWhereUniqueInput): Booking!
  campaignStatuses(where: CampaignStatusWhereInput, orderBy: [CampaignStatusOrderByWithRelationInput!], cursor: WhereUniqueInputCampaignId, take: Int, skip: Int, distinct: [CampaignStatusScalarFieldEnum!]): [CampaignStatus!]!
  campaignStatus(where: CampaignStatusWhereUniqueInput): CampaignStatus!
}

input OwnerWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  billboards: BillboardListRelationFilter
  AND: [OwnerWhereInput!]
  OR: [OwnerWhereInput!]
  NOT: [OwnerWhereInput!]
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
  mode: QueryMode
}

enum QueryMode {
  default
  insensitive
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input BillboardListRelationFilter {
  every: BillboardWhereInput
  some: BillboardWhereInput
  none: BillboardWhereInput
}

input BillboardWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  lat: IntFilter
  lng: IntFilter
  height: IntFilter
  width: IntFilter
  pricePerDay: IntFilter
  impressionsPerDay: IntFilter
  minBookingDays: IntFilter
  address: StringFilter
  images: StringListFilter
  type: BillboardType
  ownerId: StringFilter
  angle: IntFilter
  elevation: IntFilter
  owner: OwnerRelationFilter
  bookings: BookingListRelationFilter
  status: BillboardStatusRelationFilter
  favorites: FavoriteListRelationFilter
  AND: [BillboardWhereInput!]
  OR: [BillboardWhereInput!]
  NOT: [BillboardWhereInput!]
}

input IntFilter {
  equals: Int
  in: Int
  notIn: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: Int
}

input StringListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input OwnerRelationFilter {
  is: OwnerWhereInput
  isNot: OwnerWhereInput
}

input BookingListRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input BookingWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  pricePerDay: IntFilter
  campaignId: IntFilter
  billboardId: IntFilter
  campaign: CampaignRelationFilter
  billboard: BillboardRelationFilter
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
}

input CampaignRelationFilter {
  is: CampaignWhereInput
  isNot: CampaignWhereInput
}

input CampaignWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  advertiserId: StringFilter
  advertiser: AdvertiserRelationFilter
  bookings: BookingListRelationFilter
  status: CampaignStatusRelationFilter
  AND: [CampaignWhereInput!]
  OR: [CampaignWhereInput!]
  NOT: [CampaignWhereInput!]
}

input AdvertiserRelationFilter {
  is: AdvertiserWhereInput
  isNot: AdvertiserWhereInput
}

input AdvertiserWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  campaigns: CampaignListRelationFilter
  Favorite: FavoriteListRelationFilter
  AND: [AdvertiserWhereInput!]
  OR: [AdvertiserWhereInput!]
  NOT: [AdvertiserWhereInput!]
}

input CampaignListRelationFilter {
  every: CampaignWhereInput
  some: CampaignWhereInput
  none: CampaignWhereInput
}

input FavoriteListRelationFilter {
  every: FavoriteWhereInput
  some: FavoriteWhereInput
  none: FavoriteWhereInput
}

input FavoriteWhereInput {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  advertiserId: StringFilter
  billboardId: IntFilter
  advertiser: AdvertiserRelationFilter
  billboard: BillboardRelationFilter
  AND: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
}

input BillboardRelationFilter {
  is: BillboardWhereInput
  isNot: BillboardWhereInput
}

input CampaignStatusRelationFilter {
  is: CampaignStatusWhereInput
  isNot: CampaignStatusWhereInput
}

input CampaignStatusWhereInput {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  status: CampaignStatusType
  campaignId: IntFilter
  agentId: StringFilter
  campaign: CampaignRelationFilter
  agent: AgentRelationFilter
  AND: [CampaignStatusWhereInput!]
  OR: [CampaignStatusWhereInput!]
  NOT: [CampaignStatusWhereInput!]
}

input AgentRelationFilter {
  is: AgentWhereInput
  isNot: AgentWhereInput
}

input AgentWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  billboardsStatuses: BillboardStatusListRelationFilter
  campaignsStatuses: CampaignStatusListRelationFilter
  AND: [AgentWhereInput!]
  OR: [AgentWhereInput!]
  NOT: [AgentWhereInput!]
}

input BillboardStatusListRelationFilter {
  every: BillboardStatusWhereInput
  some: BillboardStatusWhereInput
  none: BillboardStatusWhereInput
}

input BillboardStatusWhereInput {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  notes: StringFilter
  status: BillboardStatusType
  billboardId: IntFilter
  agentId: StringFilter
  billboard: BillboardRelationFilter
  agent: AgentRelationFilter
  AND: [BillboardStatusWhereInput!]
  OR: [BillboardStatusWhereInput!]
  NOT: [BillboardStatusWhereInput!]
}

input CampaignStatusListRelationFilter {
  every: CampaignStatusWhereInput
  some: CampaignStatusWhereInput
  none: CampaignStatusWhereInput
}

input BillboardStatusRelationFilter {
  is: BillboardStatusWhereInput
  isNot: BillboardStatusWhereInput
}

input OwnerOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  billboards: BillboardOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input BillboardOrderByRelationAggregateInput {
  _count: SortOrder
}

input WhereUniqueInputUid {
  uid: String
}

enum OwnerScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
}

input OwnerWhereUniqueInput {
  uid: String
}

input AdvertiserOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  campaigns: CampaignOrderByRelationAggregateInput
  Favorite: FavoriteOrderByRelationAggregateInput
}

input CampaignOrderByRelationAggregateInput {
  _count: SortOrder
}

input FavoriteOrderByRelationAggregateInput {
  _count: SortOrder
}

enum AdvertiserScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
}

input AdvertiserWhereUniqueInput {
  uid: String
}

input AgentOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  billboardsStatuses: BillboardStatusOrderByRelationAggregateInput
  campaignsStatuses: CampaignStatusOrderByRelationAggregateInput
}

input BillboardStatusOrderByRelationAggregateInput {
  _count: SortOrder
}

input CampaignStatusOrderByRelationAggregateInput {
  _count: SortOrder
}

enum AgentScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
}

input AgentWhereUniqueInput {
  uid: String
}

input BillboardOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  lat: SortOrder
  lng: SortOrder
  height: SortOrder
  width: SortOrder
  pricePerDay: SortOrder
  impressionsPerDay: SortOrder
  minBookingDays: SortOrder
  address: SortOrder
  images: SortOrder
  type: SortOrder
  ownerId: SortOrder
  angle: SortOrder
  elevation: SortOrder
  owner: OwnerOrderByWithRelationInput
  bookings: BookingOrderByRelationAggregateInput
  status: BillboardStatusOrderByWithRelationInput
  favorites: FavoriteOrderByRelationAggregateInput
}

input BookingOrderByRelationAggregateInput {
  _count: SortOrder
}

input BillboardStatusOrderByWithRelationInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  notes: SortOrder
  status: SortOrder
  billboardId: SortOrder
  agentId: SortOrder
  billboard: BillboardOrderByWithRelationInput
  agent: AgentOrderByWithRelationInput
}

input WhereUniqueInputNumber {
  id: Int
}

enum BillboardScalarFieldEnum {
  id
  createdAt
  updatedAt
  lat
  lng
  height
  width
  pricePerDay
  impressionsPerDay
  minBookingDays
  address
  images
  type
  ownerId
  angle
  elevation
}

input BillboardWhereUniqueInput {
  id: Int
}

input WhereUniqueInputBillboardId {
  billboardId: Int
}

enum BillboardStatusScalarFieldEnum {
  createdAt
  updatedAt
  notes
  status
  billboardId
  agentId
}

input BillboardStatusWhereUniqueInput {
  billboardId: Int
}

input FavoriteOrderByWithRelationInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  advertiserId: SortOrder
  billboardId: SortOrder
  advertiser: AdvertiserOrderByWithRelationInput
  billboard: BillboardOrderByWithRelationInput
}

input WhereUniqueInputFavorite {
  advertiserId_billboardId: WhereUniqueInputFavoriteInner
}

input WhereUniqueInputFavoriteInner {
  billboardId: Int
  advertiserId: String
}

enum FavoriteScalarFieldEnum {
  createdAt
  updatedAt
  advertiserId
  billboardId
}

input FavoriteWhereUniqueInput {
  advertiserId_billboardId: WhereUniqueInputFavoriteInner!
}

input CampaignOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  advertiserId: SortOrder
  advertiser: AdvertiserOrderByWithRelationInput
  bookings: BookingOrderByRelationAggregateInput
  status: CampaignStatusOrderByWithRelationInput
}

input CampaignStatusOrderByWithRelationInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  status: SortOrder
  campaignId: SortOrder
  agentId: SortOrder
  campaign: CampaignOrderByWithRelationInput
  agent: AgentOrderByWithRelationInput
}

enum CampaignScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
  startDate
  endDate
  advertiserId
}

input CampaignWhereUniqueInput {
  id: Int
}

input BookingOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  pricePerDay: SortOrder
  campaignId: SortOrder
  billboardId: SortOrder
  campaign: CampaignOrderByWithRelationInput
  billboard: BillboardOrderByWithRelationInput
}

enum BookingScalarFieldEnum {
  id
  createdAt
  updatedAt
  pricePerDay
  campaignId
  billboardId
}

input BookingWhereUniqueInput {
  id: Int
}

input WhereUniqueInputCampaignId {
  campaignId: Int
}

enum CampaignStatusScalarFieldEnum {
  createdAt
  updatedAt
  status
  campaignId
  agentId
}

input CampaignStatusWhereUniqueInput {
  campaignId: Int
}

type Mutation {
  createOwner(createOwnerInput: CreateOwnerInput!): Owner!
  updateOwner(updateOwnerInput: UpdateOwnerInput!): Owner!
  removeOwner(where: OwnerWhereUniqueInput): Owner!
  createAdvertiser(createAdvertiserInput: CreateAdvertiserInput!): Advertiser!
  updateAdvertiser(updateAdvertiserInput: UpdateAdvertiserInput!): Advertiser!
  removeAdvertiser(where: AdvertiserWhereUniqueInput): Advertiser!
  createAgent(createAgentInput: CreateAgentInput!): Agent!
  updateAgent(updateAgentInput: UpdateAgentInput!): Agent!
  removeAgent(where: AgentWhereUniqueInput): Agent!
  createBillboard(createBillboardInput: CreateBillboardInput!): Billboard!
  updateBillboard(updateBillboardInput: UpdateBillboardInput!): Billboard!
  removeBillboard(where: BillboardWhereUniqueInput): Billboard!
  createBillboardStatus(createBillboardStatusInput: CreateBillboardStatusInput!): BillboardStatus!
  updateBillboardStatus(updateBillboardStatusInput: UpdateBillboardStatusInput!): BillboardStatus!
  removeBillboardStatus(where: BillboardStatusWhereUniqueInput): BillboardStatus!
  createFavorite(createFavoriteInput: CreateFavoriteInput!): Favorite!
  updateFavorite(updateFavoriteInput: UpdateFavoriteInput!): Favorite!
  removeFavorite(where: FavoriteWhereUniqueInput): Favorite!
  createCampaign(createCampaignInput: CreateCampaignInput!): Campaign!
  updateCampaign(updateCampaignInput: UpdateCampaignInput!): Campaign!
  removeCampaign(where: CampaignWhereUniqueInput): Campaign!
  createBooking(createBookingInput: CreateBookingInput!): Booking!
  updateBooking(updateBookingInput: UpdateBookingInput!): Booking!
  removeBooking(where: BookingWhereUniqueInput): Booking!
  createCampaignStatus(createCampaignStatusInput: CreateCampaignStatusInput!): CampaignStatus!
  updateCampaignStatus(updateCampaignStatusInput: UpdateCampaignStatusInput!): CampaignStatus!
  removeCampaignStatus(where: CampaignStatusWhereUniqueInput): CampaignStatus!
}

input CreateOwnerInput {
  uid: String!
  name: String!
}

input UpdateOwnerInput {
  uid: String!
  name: String
}

input CreateAdvertiserInput {
  uid: String!
  name: String!
}

input UpdateAdvertiserInput {
  uid: String!
  name: String
}

input CreateAgentInput {
  uid: String!
  name: String!
}

input UpdateAgentInput {
  uid: String!
  name: String
}

input CreateBillboardInput {
  lat: Float!
  lng: Float!
  type: BillboardType!
  ownerId: String!
  height: Int!
  width: Int!
  impressionsPerDay: Int!
  minBookingDays: Int!
  address: String!
  images: [String!]!
  angle: Int!
  elevation: Int!
}

input UpdateBillboardInput {
  lat: Float
  lng: Float
  type: BillboardType
  ownerId: String
  height: Int
  width: Int
  impressionsPerDay: Int
  minBookingDays: Int
  address: String
  images: [String!]
  angle: Int
  elevation: Int
  id: Int!
}

input CreateBillboardStatusInput {
  status: BillboardStatusType!
  notes: String!
  billboardId: Int!
  agentId: String!
}

input UpdateBillboardStatusInput {
  status: BillboardStatusType
  notes: String
  billboardId: Int!
  agentId: String
}

input CreateFavoriteInput {
  advertiserId: String!
  billboardId: Int!
}

input UpdateFavoriteInput {
  advertiserId: String
  billboardId: Int
  advertiserId_billboardId: WhereUniqueInputFavoriteInner!
}

input CreateCampaignInput {
  name: String!
  startDate: DateTime!
  endDate: DateTime!
  advertiserId: String!
  bookings: [CreateBookingWithoutCampaignIdInput!]!
}

input CreateBookingWithoutCampaignIdInput {
  pricePerDay: Int!
  billboardId: Int!
}

input UpdateCampaignInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  id: Int!
}

input CreateBookingInput {
  pricePerDay: Int!
  campaignId: Int!
  billboardId: Int!
}

input UpdateBookingInput {
  pricePerDay: Int
  campaignId: Int
  billboardId: Int
  id: Int!
}

input CreateCampaignStatusInput {
  status: CampaignStatusType!
  campaignId: Int!
  agentId: String!
}

input UpdateCampaignStatusInput {
  status: CampaignStatusType
  campaignId: Int!
  agentId: String
}